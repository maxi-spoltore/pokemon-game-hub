const wordsearch = require('wordsearch');

const matrixMock = {
	"grid": [
			[
					"a",
					"t",
					"u",
					"o",
					"r",
					"p",
					"s",
					"l",
					"l",
					"e",
					"b",
					"d",
					"i",
					"o",
					"n"
			],
			[
					"y",
					"z",
					"o",
					"f",
					"w",
					"n",
					"m",
					"a",
					"i",
					"r",
					"r",
					"f",
					"t",
					"c",
					"h"
			],
			[
					"c",
					"a",
					"i",
					"r",
					"n",
					"n",
					"p",
					"m",
					"v",
					"m",
					"y",
					"o",
					"z",
					"l",
					"v"
			],
			[
					"m",
					"m",
					"o",
					"x",
					"b",
					"a",
					"q",
					"d",
					"j",
					"c",
					"z",
					"q",
					"p",
					"c",
					"m"
			],
			[
					"b",
					"k",
					"t",
					"w",
					"z",
					"w",
					"x",
					"r",
					"h",
					"i",
					"s",
					"t",
					"e",
					"a",
					"y"
			],
			[
					"l",
					"o",
					"j",
					"a",
					"s",
					"y",
					"o",
					"k",
					"o",
					"e",
					"u",
					"g",
					"g",
					"b",
					"p"
			],
			[
					"a",
					"z",
					"e",
					"r",
					"b",
					"z",
					"m",
					"l",
					"u",
					"h",
					"q",
					"i",
					"u",
					"x",
					"t"
			],
			[
					"s",
					"w",
					"n",
					"t",
					"s",
					"j",
					"a",
					"n",
					"s",
					"n",
					"k",
					"l",
					"m",
					"f",
					"x"
			],
			[
					"t",
					"z",
					"i",
					"o",
					"t",
					"n",
					"n",
					"v",
					"v",
					"a",
					"b",
					"c",
					"i",
					"z",
					"z"
			],
			[
					"o",
					"a",
					"n",
					"r",
					"i",
					"e",
					"y",
					"b",
					"r",
					"a",
					"c",
					"j",
					"v",
					"w",
					"e"
			],
			[
					"i",
					"p",
					"a",
					"t",
					"r",
					"x",
					"t",
					"p",
					"s",
					"r",
					"q",
					"t",
					"k",
					"l",
					"s"
			],
			[
					"s",
					"d",
					"c",
					"l",
					"j",
					"c",
					"e",
					"a",
					"x",
					"q",
					"v",
					"f",
					"e",
					"z",
					"m"
			],
			[
					"e",
					"o",
					"r",
					"e",
					"m",
					"o",
					"u",
					"y",
					"o",
					"p",
					"o",
					"w",
					"z",
					"a",
					"x"
			],
			[
					"h",
					"s",
					"a",
					"w",
					"y",
					"r",
					"s",
					"e",
					"a",
					"k",
					"i",
					"n",
					"g",
					"z",
					"t"
			],
			[
					"e",
					"c",
					"y",
					"c",
					"u",
					"j",
					"f",
					"j",
					"s",
					"r",
					"r",
					"u",
					"w",
					"i",
					"p"
			]
	],
	"solved": [
			[
					" ",
					"t",
					"u",
					"o",
					"r",
					"p",
					"s",
					"l",
					"l",
					"e",
					"b",
					" ",
					" ",
					" ",
					" "
			],
			[
					" ",
					" ",
					"o",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" "
			],
			[
					" ",
					" ",
					" ",
					"r",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" "
			],
			[
					" ",
					" ",
					" ",
					" ",
					"b",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					"m"
			],
			[
					"b",
					" ",
					" ",
					"w",
					" ",
					"w",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					"a",
					" "
			],
			[
					"l",
					" ",
					" ",
					"a",
					" ",
					" ",
					"o",
					" ",
					" ",
					" ",
					" ",
					" ",
					"g",
					"b",
					" "
			],
			[
					"a",
					" ",
					"e",
					"r",
					" ",
					" ",
					"m",
					"l",
					" ",
					" ",
					" ",
					"i",
					"u",
					" ",
					" "
			],
			[
					"s",
					" ",
					"n",
					"t",
					" ",
					" ",
					"a",
					" ",
					"s",
					" ",
					"k",
					"l",
					" ",
					" ",
					" "
			],
			[
					"t",
					"z",
					"i",
					"o",
					" ",
					" ",
					"n",
					" ",
					" ",
					"a",
					"b",
					" ",
					" ",
					" ",
					" "
			],
			[
					"o",
					"a",
					"n",
					"r",
					" ",
					" ",
					"y",
					" ",
					"r",
					"a",
					" ",
					" ",
					" ",
					" ",
					" "
			],
			[
					"i",
					"p",
					"a",
					"t",
					" ",
					" ",
					"t",
					"p",
					"s",
					" ",
					" ",
					" ",
					" ",
					" ",
					" "
			],
			[
					"s",
					"d",
					"c",
					"l",
					" ",
					" ",
					"e",
					"a",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" "
			],
			[
					"e",
					"o",
					"r",
					"e",
					" ",
					" ",
					"u",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" "
			],
			[
					" ",
					"s",
					"a",
					" ",
					" ",
					"r",
					"s",
					"e",
					"a",
					"k",
					"i",
					"n",
					"g",
					" ",
					" "
			],
			[
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" ",
					" "
			]
	],
	"unplaced": []
}

const useBoard = wordList => {
	// const matrix = wordsearch(wordList, 15, 15);
	const { grid } = matrixMock;
	const gridWithCoords = grid.map((row, y) => {
		return row.map((cell, x) => ({ char: cell, x: x + 1, y: y + 1 }))
	});
	const flattenedGrid = gridWithCoords.reduce((acc, val) => acc.concat(val), []);
	console.log({ flattenedGrid });
	return { grid: flattenedGrid };
};

export default useBoard;